Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
     4   50.230 MiB   50.230 MiB   @profile
     5                             def AjusteImg(img):
     6                             	#------------------------------ Ajuste de Regiao
     7   50.230 MiB    0.000 MiB   	corteInicial = 240 #240 pixel
     8   50.230 MiB    0.000 MiB   	corteFinal = 340 #340 pixel
     9                             
    10   50.379 MiB    0.148 MiB   	CorteImg = img[corteInicial:corteFinal, 0:largura].copy() #Intervalo valido 15~100cm
    11   50.562 MiB    0.184 MiB   	CorteImg = cv2.normalize(CorteImg, CorteImg, 0, 255, cv2.NORM_MINMAX) #Normalizacao da escala de cores
    12   50.922 MiB    0.359 MiB   	CorteImg = cv2.GaussianBlur(CorteImg, (1,1), 0) #Desfoque na imagem, remocao de ruidos
    13   50.922 MiB    0.000 MiB   	return CorteImg, corteInicial


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    15   50.922 MiB   50.922 MiB   @profile
    16                             def GradienteSobel(imgCrop):
    17   51.254 MiB    0.332 MiB   	cinza = cv2.cvtColor(CorteImg, cv2.COLOR_BGR2GRAY)
    18   51.723 MiB    0.469 MiB   	gy = cv2.Sobel(cinza, cv2.CV_8U, 0, 1, ksize=3)
    19                             
    20                             	#------------------------------ Thereshold
    21   51.969 MiB    0.246 MiB   	ret, th1 = cv2.threshold(numpy.absolute(gy), 50, 255, cv2.THRESH_BINARY)
    22   51.969 MiB    0.000 MiB   	return th1


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   51.969 MiB   51.969 MiB   @profile
    25                             def FiltroImg(th1):
    26   51.969 MiB    0.000 MiB   	y = []
    27   52.090 MiB    0.121 MiB   	linhas = cv2.HoughLinesP(th1, 1, numpy.pi/2, 20, 30, 15)
    28   52.090 MiB    0.000 MiB   	if linhas is None:
    29                             		yMax = None
    30                             	else:
    31   52.090 MiB    0.000 MiB   		for linha in linhas: # Percorrendo o vetor resultante do filtro HoughLinesP
    32   52.090 MiB    0.000 MiB   		    for x1,y1,x2,y2 in linha:
    33   52.090 MiB    0.000 MiB   		        y.extend([y1, y2]) # Adicionando coordenadas de altura ao vetor y
    34   52.090 MiB    0.000 MiB   		yMax = max(y)
    35   52.090 MiB    0.000 MiB   	return yMax # Altura maxima


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    37   52.094 MiB   52.094 MiB   @profile
    38                             def Distancia(yMax, rpc, ro, alturaLaser): #------------------------------ Calculo da distancia
    39   52.094 MiB    0.000 MiB   	if(yMax == None):
    40                             		distancia = 0
    41                             	else:
    42   52.094 MiB    0.000 MiB   		pfc = abs((yMax+corteInicial)-(altura/2))
    43   52.094 MiB    0.000 MiB   		theta = rpc * pfc + ro
    44   52.094 MiB    0.000 MiB   		distancia = alturaLaser/tan(theta)
    45   52.094 MiB    0.000 MiB   	return distancia


Wrote profile results to Sobel.py.lprof
Timer unit: 1e-06 s

Total time: 0.023864 s
File: Sobel.py
Function: AjusteImg at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def AjusteImg(img):
     6                                           	#------------------------------ Ajuste de Regiao
     7         1         46.0     46.0      0.2  	corteInicial = 240 #240 pixel
     8         1         29.0     29.0      0.1  	corteFinal = 340 #340 pixel
     9                                           
    10         1       1374.0   1374.0      5.8  	CorteImg = img[corteInicial:corteFinal, 0:largura].copy() #Intervalo valido 15~100cm
    11         1      20570.0  20570.0     86.2  	CorteImg = cv2.normalize(CorteImg, CorteImg, 0, 255, cv2.NORM_MINMAX) #Normalizacao da escala de cores
    12         1       1798.0   1798.0      7.5  	CorteImg = cv2.GaussianBlur(CorteImg, (1,1), 0) #Desfoque na imagem, remocao de ruidos
    13         1         47.0     47.0      0.2  	return CorteImg, corteInicial

Total time: 0.016457 s
File: Sobel.py
Function: GradienteSobel at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def GradienteSobel(imgCrop):
    17         1       4150.0   4150.0     25.2  	cinza = cv2.cvtColor(CorteImg, cv2.COLOR_BGR2GRAY)
    18         1       8623.0   8623.0     52.4  	gy = cv2.Sobel(cinza, cv2.CV_8U, 0, 1, ksize=3)
    19                                           
    20                                           	#------------------------------ Thereshold
    21         1       3642.0   3642.0     22.1  	ret, th1 = cv2.threshold(numpy.absolute(gy), 50, 255, cv2.THRESH_BINARY)
    22         1         42.0     42.0      0.3  	return th1

Total time: 0.005046 s
File: Sobel.py
Function: FiltroImg at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @profile
    25                                           def FiltroImg(th1):
    26         1         39.0     39.0      0.8  	y = []
    27         1       3065.0   3065.0     60.7  	linhas = cv2.HoughLinesP(th1, 1, numpy.pi/2, 20, 30, 15)
    28         1         46.0     46.0      0.9  	if linhas is None:
    29                                           		yMax = None
    30                                           	else:
    31         6        353.0     58.8      7.0  		for linha in linhas: # Percorrendo o vetor resultante do filtro HoughLinesP
    32        10       1120.0    112.0     22.2  		    for x1,y1,x2,y2 in linha:
    33         5        319.0     63.8      6.3  		        y.extend([y1, y2]) # Adicionando coordenadas de altura ao vetor y
    34         1         78.0     78.0      1.5  		yMax = max(y)
    35         1         26.0     26.0      0.5  	return yMax # Altura maxima

Total time: 0.000291 s
File: Sobel.py
Function: Distancia at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                           @profile
    38                                           def Distancia(yMax, rpc, ro, alturaLaser): #------------------------------ Calculo da distancia
    39         1         62.0     62.0     21.3  	if(yMax == None):
    40                                           		distancia = 0
    41                                           	else:
    42         1        111.0    111.0     38.1  		pfc = abs((yMax+corteInicial)-(altura/2))
    43         1         46.0     46.0     15.8  		theta = rpc * pfc + ro
    44         1         48.0     48.0     16.5  		distancia = alturaLaser/tan(theta)
    45         1         24.0     24.0      8.2  	return distancia

