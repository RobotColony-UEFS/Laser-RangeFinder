Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
     4   50.352 MiB   50.352 MiB   @profile
     5                             def AjusteImg(img):
     6                             	#------------------------------ Ajuste de Regiao
     7   50.352 MiB    0.000 MiB   	corteInicial = 240 #240 pixel
     8   50.352 MiB    0.000 MiB   	corteFinal = 340 #340 pixel
     9                             
    10   50.500 MiB    0.148 MiB   	CorteImg = img[corteInicial:corteFinal, 0:largura].copy() #Intervalo valido 15~100cm
    11   50.793 MiB    0.293 MiB   	CorteImg = cv2.normalize(CorteImg, CorteImg, 0, 255, cv2.NORM_MINMAX) #Normalizacao da escala de cores
    12   51.102 MiB    0.309 MiB   	CorteImg = cv2.GaussianBlur(CorteImg, (1,1), 0) #Desfoque na imagem, remocao de ruidos
    13   51.102 MiB    0.000 MiB   	return CorteImg, corteInicial


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    15   51.102 MiB   51.102 MiB   @profile
    16                             def GradienteSobel(imgCrop):
    17   51.461 MiB    0.359 MiB   	cinza = cv2.cvtColor(CorteImg, cv2.COLOR_BGR2GRAY)
    18   51.828 MiB    0.367 MiB   	gy = cv2.Sobel(cinza, cv2.CV_8U, 0, 1, ksize=3)
    19                             
    20                             	#------------------------------ Thereshold
    21   52.074 MiB    0.246 MiB   	ret, th1 = cv2.threshold(numpy.absolute(gy), 50, 255, cv2.THRESH_BINARY)
    22   52.074 MiB    0.000 MiB   	return th1


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   52.074 MiB   52.074 MiB   @profile
    25                             def FiltroImg(th1):
    26   52.074 MiB    0.000 MiB   	y = []
    27   52.195 MiB    0.121 MiB   	linhas = cv2.HoughLinesP(th1, 1, numpy.pi/2, 20, 30, 15)
    28   52.195 MiB    0.000 MiB   	if linhas is None:
    29                             		yMax = None
    30                             	else:
    31   52.195 MiB    0.000 MiB   		for linha in linhas: # Percorrendo o vetor resultante do filtro HoughLinesP
    32   52.195 MiB    0.000 MiB   		    for x1,y1,x2,y2 in linha:
    33   52.195 MiB    0.000 MiB   		        y.extend([y1, y2]) # Adicionando coordenadas de altura ao vetor y
    34   52.195 MiB    0.000 MiB   		yMax = max(y)
    35   52.195 MiB    0.000 MiB   	return yMax # Altura maxima


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    37   52.199 MiB   52.199 MiB   @profile
    38                             def Distancia(yMax, rpc, ro, alturaLaser): #------------------------------ Calculo da distancia
    39   52.199 MiB    0.000 MiB   	if(yMax == None):
    40                             		distancia = 0
    41                             	else:
    42   52.199 MiB    0.000 MiB   		pfc = abs((yMax+corteInicial)-(altura/2))
    43   52.199 MiB    0.000 MiB   		theta = rpc * pfc + ro
    44   52.199 MiB    0.000 MiB   		distancia = alturaLaser/tan(theta)
    45   52.199 MiB    0.000 MiB   	return distancia


Wrote profile results to Sobel.py.lprof
Timer unit: 1e-06 s

Total time: 0.0234 s
File: Sobel.py
Function: AjusteImg at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def AjusteImg(img):
     6                                           	#------------------------------ Ajuste de Regiao
     7         1         43.0     43.0      0.2  	corteInicial = 240 #240 pixel
     8         1         30.0     30.0      0.1  	corteFinal = 340 #340 pixel
     9                                           
    10         1       1244.0   1244.0      5.3  	CorteImg = img[corteInicial:corteFinal, 0:largura].copy() #Intervalo valido 15~100cm
    11         1      20137.0  20137.0     86.1  	CorteImg = cv2.normalize(CorteImg, CorteImg, 0, 255, cv2.NORM_MINMAX) #Normalizacao da escala de cores
    12         1       1887.0   1887.0      8.1  	CorteImg = cv2.GaussianBlur(CorteImg, (1,1), 0) #Desfoque na imagem, remocao de ruidos
    13         1         59.0     59.0      0.3  	return CorteImg, corteInicial

Total time: 0.01641 s
File: Sobel.py
Function: GradienteSobel at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def GradienteSobel(imgCrop):
    17         1       3941.0   3941.0     24.0  	cinza = cv2.cvtColor(CorteImg, cv2.COLOR_BGR2GRAY)
    18         1       8822.0   8822.0     53.8  	gy = cv2.Sobel(cinza, cv2.CV_8U, 0, 1, ksize=3)
    19                                           
    20                                           	#------------------------------ Thereshold
    21         1       3612.0   3612.0     22.0  	ret, th1 = cv2.threshold(numpy.absolute(gy), 50, 255, cv2.THRESH_BINARY)
    22         1         35.0     35.0      0.2  	return th1

Total time: 0.00567 s
File: Sobel.py
Function: FiltroImg at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @profile
    25                                           def FiltroImg(th1):
    26         1         32.0     32.0      0.6  	y = []
    27         1       3351.0   3351.0     59.1  	linhas = cv2.HoughLinesP(th1, 1, numpy.pi/2, 20, 30, 15)
    28         1         50.0     50.0      0.9  	if linhas is None:
    29                                           		yMax = None
    30                                           	else:
    31         7        408.0     58.3      7.2  		for linha in linhas: # Percorrendo o vetor resultante do filtro HoughLinesP
    32        12       1344.0    112.0     23.7  		    for x1,y1,x2,y2 in linha:
    33         6        372.0     62.0      6.6  		        y.extend([y1, y2]) # Adicionando coordenadas de altura ao vetor y
    34         1         86.0     86.0      1.5  		yMax = max(y)
    35         1         27.0     27.0      0.5  	return yMax # Altura maxima

Total time: 0.000292 s
File: Sobel.py
Function: Distancia at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                           @profile
    38                                           def Distancia(yMax, rpc, ro, alturaLaser): #------------------------------ Calculo da distancia
    39         1         58.0     58.0     19.9  	if(yMax == None):
    40                                           		distancia = 0
    41                                           	else:
    42         1        109.0    109.0     37.3  		pfc = abs((yMax+corteInicial)-(altura/2))
    43         1         48.0     48.0     16.4  		theta = rpc * pfc + ro
    44         1         53.0     53.0     18.2  		distancia = alturaLaser/tan(theta)
    45         1         24.0     24.0      8.2  	return distancia

