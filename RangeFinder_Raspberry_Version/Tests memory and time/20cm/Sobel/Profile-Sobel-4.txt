Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
     4   50.117 MiB   50.117 MiB   @profile
     5                             def AjusteImg(img):
     6                             	#------------------------------ Ajuste de Regiao
     7   50.117 MiB    0.000 MiB   	corteInicial = 240 #240 pixel
     8   50.117 MiB    0.000 MiB   	corteFinal = 340 #340 pixel
     9                             
    10   50.266 MiB    0.148 MiB   	CorteImg = img[corteInicial:corteFinal, 0:largura].copy() #Intervalo valido 15~100cm
    11   50.551 MiB    0.285 MiB   	CorteImg = cv2.normalize(CorteImg, CorteImg, 0, 255, cv2.NORM_MINMAX) #Normalizacao da escala de cores
    12   50.859 MiB    0.309 MiB   	CorteImg = cv2.GaussianBlur(CorteImg, (1,1), 0) #Desfoque na imagem, remocao de ruidos
    13   50.859 MiB    0.000 MiB   	return CorteImg, corteInicial


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    15   50.859 MiB   50.859 MiB   @profile
    16                             def GradienteSobel(imgCrop):
    17   51.219 MiB    0.359 MiB   	cinza = cv2.cvtColor(CorteImg, cv2.COLOR_BGR2GRAY)
    18   51.613 MiB    0.395 MiB   	gy = cv2.Sobel(cinza, cv2.CV_8U, 0, 1, ksize=3)
    19                             
    20                             	#------------------------------ Thereshold
    21   51.922 MiB    0.309 MiB   	ret, th1 = cv2.threshold(numpy.absolute(gy), 50, 255, cv2.THRESH_BINARY)
    22   51.922 MiB    0.000 MiB   	return th1


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   51.922 MiB   51.922 MiB   @profile
    25                             def FiltroImg(th1):
    26   51.922 MiB    0.000 MiB   	y = []
    27   52.043 MiB    0.121 MiB   	linhas = cv2.HoughLinesP(th1, 1, numpy.pi/2, 20, 30, 15)
    28   52.043 MiB    0.000 MiB   	if linhas is None:
    29                             		yMax = None
    30                             	else:
    31   52.043 MiB    0.000 MiB   		for linha in linhas: # Percorrendo o vetor resultante do filtro HoughLinesP
    32   52.043 MiB    0.000 MiB   		    for x1,y1,x2,y2 in linha:
    33   52.043 MiB    0.000 MiB   		        y.extend([y1, y2]) # Adicionando coordenadas de altura ao vetor y
    34   52.043 MiB    0.000 MiB   		yMax = max(y)
    35   52.043 MiB    0.000 MiB   	return yMax # Altura maxima


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    37   52.043 MiB   52.043 MiB   @profile
    38                             def Distancia(yMax, rpc, ro, alturaLaser): #------------------------------ Calculo da distancia
    39   52.043 MiB    0.000 MiB   	if(yMax == None):
    40                             		distancia = 0
    41                             	else:
    42   52.043 MiB    0.000 MiB   		pfc = abs((yMax+corteInicial)-(altura/2))
    43   52.043 MiB    0.000 MiB   		theta = rpc * pfc + ro
    44   52.043 MiB    0.000 MiB   		distancia = alturaLaser/tan(theta)
    45   52.043 MiB    0.000 MiB   	return distancia


Wrote profile results to Sobel.py.lprof
Timer unit: 1e-06 s

Total time: 0.023754 s
File: Sobel.py
Function: AjusteImg at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def AjusteImg(img):
     6                                           	#------------------------------ Ajuste de Regiao
     7         1         44.0     44.0      0.2  	corteInicial = 240 #240 pixel
     8         1         28.0     28.0      0.1  	corteFinal = 340 #340 pixel
     9                                           
    10         1       1239.0   1239.0      5.2  	CorteImg = img[corteInicial:corteFinal, 0:largura].copy() #Intervalo valido 15~100cm
    11         1      20652.0  20652.0     86.9  	CorteImg = cv2.normalize(CorteImg, CorteImg, 0, 255, cv2.NORM_MINMAX) #Normalizacao da escala de cores
    12         1       1744.0   1744.0      7.3  	CorteImg = cv2.GaussianBlur(CorteImg, (1,1), 0) #Desfoque na imagem, remocao de ruidos
    13         1         47.0     47.0      0.2  	return CorteImg, corteInicial

Total time: 0.016644 s
File: Sobel.py
Function: GradienteSobel at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def GradienteSobel(imgCrop):
    17         1       4250.0   4250.0     25.5  	cinza = cv2.cvtColor(CorteImg, cv2.COLOR_BGR2GRAY)
    18         1       8817.0   8817.0     53.0  	gy = cv2.Sobel(cinza, cv2.CV_8U, 0, 1, ksize=3)
    19                                           
    20                                           	#------------------------------ Thereshold
    21         1       3538.0   3538.0     21.3  	ret, th1 = cv2.threshold(numpy.absolute(gy), 50, 255, cv2.THRESH_BINARY)
    22         1         39.0     39.0      0.2  	return th1

Total time: 0.004213 s
File: Sobel.py
Function: FiltroImg at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @profile
    25                                           def FiltroImg(th1):
    26         1         36.0     36.0      0.9  	y = []
    27         1       2900.0   2900.0     68.8  	linhas = cv2.HoughLinesP(th1, 1, numpy.pi/2, 20, 30, 15)
    28         1         47.0     47.0      1.1  	if linhas is None:
    29                                           		yMax = None
    30                                           	else:
    31         4        243.0     60.8      5.8  		for linha in linhas: # Percorrendo o vetor resultante do filtro HoughLinesP
    32         6        694.0    115.7     16.5  		    for x1,y1,x2,y2 in linha:
    33         3        190.0     63.3      4.5  		        y.extend([y1, y2]) # Adicionando coordenadas de altura ao vetor y
    34         1         74.0     74.0      1.8  		yMax = max(y)
    35         1         29.0     29.0      0.7  	return yMax # Altura maxima

Total time: 0.000584 s
File: Sobel.py
Function: Distancia at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                           @profile
    38                                           def Distancia(yMax, rpc, ro, alturaLaser): #------------------------------ Calculo da distancia
    39         1         62.0     62.0     10.6  	if(yMax == None):
    40                                           		distancia = 0
    41                                           	else:
    42         1        373.0    373.0     63.9  		pfc = abs((yMax+corteInicial)-(altura/2))
    43         1         63.0     63.0     10.8  		theta = rpc * pfc + ro
    44         1         56.0     56.0      9.6  		distancia = alturaLaser/tan(theta)
    45         1         30.0     30.0      5.1  	return distancia

