Filename: AgregPixel.py

Line #    Mem usage    Increment   Line Contents
================================================
     4   50.379 MiB   50.379 MiB   @profile
     5                             def AjusteImg(img):
     6                                 #------------------------------ Ajuste de Regiao
     7   50.379 MiB    0.000 MiB       corteInicial = 240 #240 pixel
     8   50.379 MiB    0.000 MiB       corteFinal = 340 #340 pixel
     9                             
    10   50.531 MiB    0.152 MiB       CorteImg = img[corteInicial:corteFinal, 0:largura].copy() #Intervalo valido 15~100cm
    11   50.828 MiB    0.297 MiB       CorteImg = cv2.normalize(CorteImg, CorteImg, 0, 255, cv2.NORM_MINMAX) #Normalizacao da escala de cores
    12   51.133 MiB    0.305 MiB       CorteImg = cv2.GaussianBlur(CorteImg, (1,1), 0) #Desfoque na imagem, remocao de ruidos
    13   51.133 MiB    0.000 MiB       return CorteImg, corteInicial


Filename: AgregPixel.py

Line #    Mem usage    Increment   Line Contents
================================================
    15   51.137 MiB   51.137 MiB   @profile
    16                             def AgregacaoPixel(CorteImg): # Identificacao e separacao da linha vermelha
    17   51.543 MiB    0.406 MiB       hsv = cv2.cvtColor(CorteImg, cv2.COLOR_BGR2HSV) # Conversao do espaco de cores, BRG para HSV
    18                             
    19   51.543 MiB    0.000 MiB       vermelho1_a = numpy.array([0,100,100]) # Range vermelho escuro
    20   51.543 MiB    0.000 MiB       vermelho1_b = numpy.array([10,255,255])
    21                             
    22   51.543 MiB    0.000 MiB       vermelho2_a = numpy.array([160,200,100]) # Range vermelho claro
    23   51.543 MiB    0.000 MiB       vermelho2_b = numpy.array([179,255,255])
    24                             
    25   51.727 MiB    0.184 MiB       mascaraEscura = cv2.inRange(hsv, vermelho1_a, vermelho1_b) # Mascara vermelho escuro
    26   51.789 MiB    0.062 MiB       mascaraClara = cv2.inRange(hsv, vermelho2_a, vermelho2_b) # Mascara vermelho claro
    27   51.848 MiB    0.059 MiB       mascara=mascaraEscura+mascaraClara #Mascara
    28                             
    29   51.910 MiB    0.062 MiB       estrutura = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 1)) # Elemento estruturante
    30   52.031 MiB    0.121 MiB       mascaraAberta = cv2.morphologyEx(mascara, cv2.MORPH_OPEN, estrutura) # Operador morfologico
    31   52.277 MiB    0.246 MiB       res = cv2.bitwise_and(CorteImg, CorteImg, mask=mascaraAberta) # Calculo a conjuncao pixel a pixel
    32                             
    33                                 #------------------------------ Thereshold
    34   52.336 MiB    0.059 MiB       cinza = cv2.cvtColor(res, cv2.COLOR_BGR2GRAY)
    35   52.582 MiB    0.246 MiB       ret, th1 = cv2.threshold(numpy.absolute(cinza), 50, 255, cv2.THRESH_BINARY)
    36   52.582 MiB    0.000 MiB       return th1


Filename: AgregPixel.py

Line #    Mem usage    Increment   Line Contents
================================================
    38   52.582 MiB   52.582 MiB   @profile
    39                             def FiltroImg(th1):
    40   52.582 MiB    0.000 MiB       y = []
    41   52.703 MiB    0.121 MiB       linhas = cv2.HoughLinesP(th1, 1, numpy.pi/2, 20, 30, 15)
    42   52.703 MiB    0.000 MiB       if linhas is None:
    43                                     yMax = None
    44                                 else:
    45   52.703 MiB    0.000 MiB           for linha in linhas: # Percorrendo o vetor resultante do filtro HoughLinesP
    46   52.703 MiB    0.000 MiB               for x1,y1,x2,y2 in linha:
    47   52.703 MiB    0.000 MiB                   y.extend([y1, y2]) # Adicionando coordenadas de altura ao vetor y
    48   52.703 MiB    0.000 MiB           yMax = max(y)
    49   52.703 MiB    0.000 MiB       return yMax # Altura maxima


Filename: AgregPixel.py

Line #    Mem usage    Increment   Line Contents
================================================
    51   52.707 MiB   52.707 MiB   @profile
    52                             def Distancia(yMax, rpc, ro, alturaLaser): #------------------------------ Calculo da distancia
    53   52.707 MiB    0.000 MiB       if(yMax == None):
    54                                     distancia = 0
    55                                 else:
    56   52.707 MiB    0.000 MiB           pfc = abs((yMax+corteInicial)-(altura/2))
    57   52.707 MiB    0.000 MiB           theta = rpc * pfc + ro
    58   52.707 MiB    0.000 MiB           distancia = alturaLaser/tan(theta)
    59   52.707 MiB    0.000 MiB       return distancia


Wrote profile results to AgregPixel.py.lprof
Timer unit: 1e-06 s

Total time: 0.023616 s
File: AgregPixel.py
Function: AjusteImg at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def AjusteImg(img):
     6                                               #------------------------------ Ajuste de Regiao
     7         1         44.0     44.0      0.2      corteInicial = 240 #240 pixel
     8         1         27.0     27.0      0.1      corteFinal = 340 #340 pixel
     9                                           
    10         1       1253.0   1253.0      5.3      CorteImg = img[corteInicial:corteFinal, 0:largura].copy() #Intervalo valido 15~100cm
    11         1      20488.0  20488.0     86.8      CorteImg = cv2.normalize(CorteImg, CorteImg, 0, 255, cv2.NORM_MINMAX) #Normalizacao da escala de cores
    12         1       1756.0   1756.0      7.4      CorteImg = cv2.GaussianBlur(CorteImg, (1,1), 0) #Desfoque na imagem, remocao de ruidos
    13         1         48.0     48.0      0.2      return CorteImg, corteInicial

Total time: 0.042553 s
File: AgregPixel.py
Function: AgregacaoPixel at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def AgregacaoPixel(CorteImg): # Identificacao e separacao da linha vermelha
    17         1      11851.0  11851.0     27.8      hsv = cv2.cvtColor(CorteImg, cv2.COLOR_BGR2HSV) # Conversao do espaco de cores, BRG para HSV
    18                                           
    19         1        223.0    223.0      0.5      vermelho1_a = numpy.array([0,100,100]) # Range vermelho escuro
    20         1        129.0    129.0      0.3      vermelho1_b = numpy.array([10,255,255])
    21                                           
    22         1        647.0    647.0      1.5      vermelho2_a = numpy.array([160,200,100]) # Range vermelho claro
    23         1        135.0    135.0      0.3      vermelho2_b = numpy.array([179,255,255])
    24                                           
    25         1       7427.0   7427.0     17.5      mascaraEscura = cv2.inRange(hsv, vermelho1_a, vermelho1_b) # Mascara vermelho escuro
    26         1       6134.0   6134.0     14.4      mascaraClara = cv2.inRange(hsv, vermelho2_a, vermelho2_b) # Mascara vermelho claro
    27         1       1951.0   1951.0      4.6      mascara=mascaraEscura+mascaraClara #Mascara
    28                                           
    29         1        505.0    505.0      1.2      estrutura = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 1)) # Elemento estruturante
    30         1        707.0    707.0      1.7      mascaraAberta = cv2.morphologyEx(mascara, cv2.MORPH_OPEN, estrutura) # Operador morfologico
    31         1       5420.0   5420.0     12.7      res = cv2.bitwise_and(CorteImg, CorteImg, mask=mascaraAberta) # Calculo a conjuncao pixel a pixel
    32                                           
    33                                               #------------------------------ Thereshold
    34         1       3516.0   3516.0      8.3      cinza = cv2.cvtColor(res, cv2.COLOR_BGR2GRAY)
    35         1       3865.0   3865.0      9.1      ret, th1 = cv2.threshold(numpy.absolute(cinza), 50, 255, cv2.THRESH_BINARY)
    36         1         43.0     43.0      0.1      return th1

Total time: 0.005136 s
File: AgregPixel.py
Function: FiltroImg at line 38

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    38                                           @profile
    39                                           def FiltroImg(th1):
    40         1         36.0     36.0      0.7      y = []
    41         1       2892.0   2892.0     56.3      linhas = cv2.HoughLinesP(th1, 1, numpy.pi/2, 20, 30, 15)
    42         1         48.0     48.0      0.9      if linhas is None:
    43                                                   yMax = None
    44                                               else:
    45         7        396.0     56.6      7.7          for linha in linhas: # Percorrendo o vetor resultante do filtro HoughLinesP
    46        12       1293.0    107.8     25.2              for x1,y1,x2,y2 in linha:
    47         6        360.0     60.0      7.0                  y.extend([y1, y2]) # Adicionando coordenadas de altura ao vetor y
    48         1         84.0     84.0      1.6          yMax = max(y)
    49         1         27.0     27.0      0.5      return yMax # Altura maxima

Total time: 0.000294 s
File: AgregPixel.py
Function: Distancia at line 51

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    51                                           @profile
    52                                           def Distancia(yMax, rpc, ro, alturaLaser): #------------------------------ Calculo da distancia
    53         1         63.0     63.0     21.4      if(yMax == None):
    54                                                   distancia = 0
    55                                               else:
    56         1        112.0    112.0     38.1          pfc = abs((yMax+corteInicial)-(altura/2))
    57         1         46.0     46.0     15.6          theta = rpc * pfc + ro
    58         1         49.0     49.0     16.7          distancia = alturaLaser/tan(theta)
    59         1         24.0     24.0      8.2      return distancia

