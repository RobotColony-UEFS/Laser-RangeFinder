Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
     4   50.004 MiB   50.004 MiB   @profile
     5                             def AjusteImg(img):
     6                             	#------------------------------ Ajuste de Regiao
     7   50.004 MiB    0.000 MiB   	corteInicial = 240 #240 pixel
     8   50.004 MiB    0.000 MiB   	corteFinal = 340 #340 pixel
     9                             
    10   50.152 MiB    0.148 MiB   	CorteImg = img[corteInicial:corteFinal, 0:largura].copy() #Intervalo valido 15~100cm
    11   50.434 MiB    0.281 MiB   	CorteImg = cv2.normalize(CorteImg, CorteImg, 0, 255, cv2.NORM_MINMAX) #Normalizacao da escala de cores
    12   50.738 MiB    0.305 MiB   	CorteImg = cv2.GaussianBlur(CorteImg, (1,1), 0) #Desfoque na imagem, remocao de ruidos
    13   50.738 MiB    0.000 MiB   	return CorteImg, corteInicial


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    15   50.738 MiB   50.738 MiB   @profile
    16                             def GradienteSobel(imgCrop):
    17   51.160 MiB    0.422 MiB   	cinza = cv2.cvtColor(CorteImg, cv2.COLOR_BGR2GRAY)
    18   51.617 MiB    0.457 MiB   	gy = cv2.Sobel(cinza, cv2.CV_8U, 0, 1, ksize=3)
    19                             
    20                             	#------------------------------ Thereshold
    21   51.863 MiB    0.246 MiB   	ret, th1 = cv2.threshold(numpy.absolute(gy), 50, 255, cv2.THRESH_BINARY)
    22   51.863 MiB    0.000 MiB   	return th1


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    24   51.863 MiB   51.863 MiB   @profile
    25                             def FiltroImg(th1):
    26   51.863 MiB    0.000 MiB   	y = []
    27   51.988 MiB    0.125 MiB   	linhas = cv2.HoughLinesP(th1, 1, numpy.pi/2, 20, 30, 15)
    28   51.988 MiB    0.000 MiB   	if linhas is None:
    29                             		yMax = None
    30                             	else:
    31   51.988 MiB    0.000 MiB   		for linha in linhas: # Percorrendo o vetor resultante do filtro HoughLinesP
    32   51.988 MiB    0.000 MiB   		    for x1,y1,x2,y2 in linha:
    33   51.988 MiB    0.000 MiB   		        y.extend([y1, y2]) # Adicionando coordenadas de altura ao vetor y
    34   51.988 MiB    0.000 MiB   		yMax = max(y)
    35   51.988 MiB    0.000 MiB   	return yMax # Altura maxima


Filename: Sobel.py

Line #    Mem usage    Increment   Line Contents
================================================
    37   51.992 MiB   51.992 MiB   @profile
    38                             def Distancia(yMax, rpc, ro, alturaLaser): #------------------------------ Calculo da distancia
    39   51.992 MiB    0.000 MiB   	if(yMax == None):
    40                             		distancia = 0
    41                             	else:
    42   52.055 MiB    0.062 MiB   		pfc = abs((yMax+corteInicial)-(altura/2))
    43   52.055 MiB    0.000 MiB   		theta = rpc * pfc + ro
    44   52.055 MiB    0.000 MiB   		distancia = alturaLaser/tan(theta)
    45   52.055 MiB    0.000 MiB   	return distancia


Wrote profile results to Sobel.py.lprof
Timer unit: 1e-06 s

Total time: 0.023622 s
File: Sobel.py
Function: AjusteImg at line 4

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           @profile
     5                                           def AjusteImg(img):
     6                                           	#------------------------------ Ajuste de Regiao
     7         1         47.0     47.0      0.2  	corteInicial = 240 #240 pixel
     8         1         31.0     31.0      0.1  	corteFinal = 340 #340 pixel
     9                                           
    10         1       1350.0   1350.0      5.7  	CorteImg = img[corteInicial:corteFinal, 0:largura].copy() #Intervalo valido 15~100cm
    11         1      20200.0  20200.0     85.5  	CorteImg = cv2.normalize(CorteImg, CorteImg, 0, 255, cv2.NORM_MINMAX) #Normalizacao da escala de cores
    12         1       1947.0   1947.0      8.2  	CorteImg = cv2.GaussianBlur(CorteImg, (1,1), 0) #Desfoque na imagem, remocao de ruidos
    13         1         47.0     47.0      0.2  	return CorteImg, corteInicial

Total time: 0.016434 s
File: Sobel.py
Function: GradienteSobel at line 15

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    15                                           @profile
    16                                           def GradienteSobel(imgCrop):
    17         1       3901.0   3901.0     23.7  	cinza = cv2.cvtColor(CorteImg, cv2.COLOR_BGR2GRAY)
    18         1       8874.0   8874.0     54.0  	gy = cv2.Sobel(cinza, cv2.CV_8U, 0, 1, ksize=3)
    19                                           
    20                                           	#------------------------------ Thereshold
    21         1       3621.0   3621.0     22.0  	ret, th1 = cv2.threshold(numpy.absolute(gy), 50, 255, cv2.THRESH_BINARY)
    22         1         38.0     38.0      0.2  	return th1

Total time: 0.00556 s
File: Sobel.py
Function: FiltroImg at line 24

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    24                                           @profile
    25                                           def FiltroImg(th1):
    26         1         34.0     34.0      0.6  	y = []
    27         1       3254.0   3254.0     58.5  	linhas = cv2.HoughLinesP(th1, 1, numpy.pi/2, 20, 30, 15)
    28         1         50.0     50.0      0.9  	if linhas is None:
    29                                           		yMax = None
    30                                           	else:
    31         7        411.0     58.7      7.4  		for linha in linhas: # Percorrendo o vetor resultante do filtro HoughLinesP
    32        12       1324.0    110.3     23.8  		    for x1,y1,x2,y2 in linha:
    33         6        372.0     62.0      6.7  		        y.extend([y1, y2]) # Adicionando coordenadas de altura ao vetor y
    34         1         88.0     88.0      1.6  		yMax = max(y)
    35         1         27.0     27.0      0.5  	return yMax # Altura maxima

Total time: 0.000296 s
File: Sobel.py
Function: Distancia at line 37

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    37                                           @profile
    38                                           def Distancia(yMax, rpc, ro, alturaLaser): #------------------------------ Calculo da distancia
    39         1         59.0     59.0     19.9  	if(yMax == None):
    40                                           		distancia = 0
    41                                           	else:
    42         1        113.0    113.0     38.2  		pfc = abs((yMax+corteInicial)-(altura/2))
    43         1         47.0     47.0     15.9  		theta = rpc * pfc + ro
    44         1         52.0     52.0     17.6  		distancia = alturaLaser/tan(theta)
    45         1         25.0     25.0      8.4  	return distancia

